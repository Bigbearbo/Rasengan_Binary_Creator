# Online Python compiler (interpreter) to run Python online.
# Write Python 3 code in this online editor and run it.
print("Try programiz.pro")
def generate_spiral_code(tier):
    if tier < 1:
        return []
    
    # 數量控制
    target_count = {1: 1, 2: 4, 3: 8, 4: 16, 5: 32}.get(tier, 2 ** (tier - 1))
    
    # 編碼長度
    bit_length = tier + 1
    
    # 1階：初始數字
    if tier == 1:
        return ["00"]  # 2位，末尾0
    
    # 前一階序列
    prev = generate_spiral_code(tier - 1)
    result = set()  # 用 set 去重
    
    # 進化規則：奇數層右黏0，偶數層左黏0
    for num in prev:
        if tier % 2 == 1:  # 奇數層：右黏0
            new_num = num + "0"
        else:  # 偶數層：左黏0
            new_num = "0" + num
        # 統一長度
        new_num = new_num.zfill(bit_length)[-bit_length:]
        if new_num[-1] == "0":  # 確保末尾0
            result.add(new_num)
    
    # 擴容：優先從前一階右黏0
    prev_result = set(result)
    for num in prev:
        new_num = num + "0"
        new_num = new_num.zfill(bit_length)[-bit_length:]
        if new_num[-1] == "0" and new_num not in prev_result:
            result.add(new_num)
    
    # 轉列表
    result = list(result)
    
    # 進位變化：補充數字直到達標
    last_num = int(result[-1], 2) if result else 0
    while len(result) < target_count:
        # 格雷碼生成，確保末尾0
        new_num = bin((last_num + 2) ^ ((last_num + 2) >> 1))[2:].zfill(bit_length)[-bit_length:]
        if new_num[-1] == "0" and new_num not in result:
            result.append(new_num)
        last_num += 2  # 增量2保證末尾0
    
    # 去重
    result = list(dict.fromkeys(result))
    
    # 按格雷碼排序：n ^ (n >> 1)
    gray_result = []
    used = set()
    for i in range(target_count):
        if i < len(result):
            gray_num = bin((int(result[i], 2) ^ (int(result[i], 2) >> 1)))[2:].zfill(bit_length)[-bit_length:]
            if gray_num[-1] == "0" and gray_num not in used:
                gray_result.append(gray_num)
                used.add(gray_num)
            else:
                # 若末尾非0或重複，生成新數字
                last_num = int(gray_result[-1], 2) if gray_result else 0
                new_num = bin((last_num + 2) ^ ((last_num + 2) >> 1))[2:].zfill(bit_length)[-bit_length:]
                while new_num in used or new_num[-1] != "0":
                    last_num += 2
                    new_num = bin((last_num + 2) ^ ((last_num + 2) >> 1))[2:].zfill(bit_length)[-bit_length:]
                gray_result.append(new_num)
                used.add(new_num)
        else:
            # 補充格雷碼
            last_num = int(gray_result[-1], 2) if gray_result else 0
            new_num = bin((last_num + 2) ^ ((last_num + 2) >> 1))[2:].zfill(bit_length)[-bit_length:]
            while new_num in used or new_num[-1] != "0":
                last_num += 2
                new_num = bin((last_num + 2) ^ ((last_num + 2) >> 1))[2:].zfill(bit_length)[-bit_length:]
            gray_result.append(new_num)
            used.add(new_num)
    
    return gray_result[:target_count]

# 輸出1到5階，每階換行
for i in range(1, 6):
    spiral = generate_spiral_code(i)
    print(f"Tier {i}: {spiral}")
    print(f"Count: {len(spiral)}\n")
